<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\W7500x_S2E_App.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\W7500x_S2E_App.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Wed Apr 19 15:50:00 2017
<BR><P>
<H3>Maximum Stack Usage =        560 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; process_dns &rArr; do_segcp &rArr; proc_SEGCP_udp &rArr; proc_SEGCP &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2a]">RTC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">RTC_Handler</a><BR>
 <LI><a href="#[59]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[1f]">DMA_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[20]">DUALTIMER0_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[21]">DUALTIMER1_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[2d]">EXTI_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[19]">I2C0_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[1a]">I2C1_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[1b]">PORT0_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[1c]">PORT1_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[1d]">PORT2_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[1e]">PORT3_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[22]">PWM0_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[23]">PWM1_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[24]">PWM2_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[25]">PWM3_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[26]">PWM4_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[27]">PWM5_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[28]">PWM6_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[29]">PWM7_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[2a]">RTC_Handler</a> from startup_w7500x.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_w7500x.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[14]">SSP0_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[15]">SSP1_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[2e]">SystemInit</a> from system_w7500x.o(.text) referenced from startup_w7500x.o(.text)
 <LI><a href="#[16]">UART0_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[17]">UART1_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[18]">UART2_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[2c]">WZTOE_Handler</a> from w7500x_it.o(.text) referenced from startup_w7500x.o(RESET)
 <LI><a href="#[3c]">__main</a> from __main.o(!!!main) referenced from startup_w7500x.o(.text)
 <LI><a href="#[34]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[38]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[37]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3a]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[36]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[35]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[b]">default_ip_assign</a> from dhcp.o(.text) referenced 2 times from dhcp.o(.data)
 <LI><a href="#[b]">default_ip_assign</a> from dhcp.o(.text) referenced from dhcp.o(.text)
 <LI><a href="#[d]">default_ip_conflict</a> from dhcp.o(.text) referenced 2 times from dhcp.o(.data)
 <LI><a href="#[d]">default_ip_conflict</a> from dhcp.o(.text) referenced from dhcp.o(.text)
 <LI><a href="#[c]">default_ip_update</a> from dhcp.o(.text) referenced 2 times from dhcp.o(.data)
 <LI><a href="#[c]">default_ip_update</a> from dhcp.o(.text) referenced from dhcp.o(.text)
 <LI><a href="#[39]">fputc</a> from retarget.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[3b]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[33]">w7500x_dhcp_assign</a> from dhcp_cb.o(.text) referenced from main.o(.text)
 <LI><a href="#[32]">w7500x_dhcp_conflict</a> from dhcp_cb.o(.text) referenced from main.o(.text)
 <LI><a href="#[9]">wizchip_bus_readbyte</a> from wizchip_conf.o(.text) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[9]">wizchip_bus_readbyte</a> from wizchip_conf.o(.text) referenced from wizchip_conf.o(.text)
 <LI><a href="#[a]">wizchip_bus_writebyte</a> from wizchip_conf.o(.text) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[a]">wizchip_bus_writebyte</a> from wizchip_conf.o(.text) referenced from wizchip_conf.o(.text)
 <LI><a href="#[5]">wizchip_cris_enter</a> from wizchip_conf.o(.text) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[5]">wizchip_cris_enter</a> from wizchip_conf.o(.text) referenced from wizchip_conf.o(.text)
 <LI><a href="#[6]">wizchip_cris_exit</a> from wizchip_conf.o(.text) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[6]">wizchip_cris_exit</a> from wizchip_conf.o(.text) referenced from wizchip_conf.o(.text)
 <LI><a href="#[8]">wizchip_cs_deselect</a> from wizchip_conf.o(.text) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[8]">wizchip_cs_deselect</a> from wizchip_conf.o(.text) referenced from wizchip_conf.o(.text)
 <LI><a href="#[7]">wizchip_cs_select</a> from wizchip_conf.o(.text) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[7]">wizchip_cs_select</a> from wizchip_conf.o(.text) referenced from wizchip_conf.o(.text)
 <LI><a href="#[30]">wizchip_spi_readbyte</a> from wizchip_conf.o(.text) referenced from wizchip_conf.o(.text)
 <LI><a href="#[31]">wizchip_spi_writebyte</a> from wizchip_conf.o(.text) referenced from wizchip_conf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3f]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1b7]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b8]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[18d]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[40]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[41]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[43]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[44]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[46]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[48]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[52]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[4a]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[4c]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[4e]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[57]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1ce]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1cf]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1d0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1d1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1d2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1d3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[3e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1d4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[51]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1d5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[53]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; process_dns &rArr; do_segcp &rArr; proc_SEGCP_udp &rArr; proc_SEGCP &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1d6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1b1]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[56]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1d7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[58]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[110]"></a>rand</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_any_port
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_info_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_main
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1d8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_w7500x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_w7500x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[1af]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_w7500x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[69]"></a>GetSystemClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_w7500x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UART_SetBaud
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W7500x_Init
</UL>

<P><STRONG><a name="[73]"></a>GetSourceClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_w7500x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UART_SetBaud
</UL>

<P><STRONG><a name="[68]"></a>GetPLLSource</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_w7500x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2e]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, system_w7500x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>SystemCoreClockUpdate_User</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, system_w7500x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate_User
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_User
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
</UL>

<P><STRONG><a name="[5c]"></a>SystemInit_User</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system_w7500x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit_User &rArr; SystemCoreClockUpdate_User
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate_User
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W7500x_Init
</UL>

<P><STRONG><a name="[5e]"></a>ADC_PowerDownEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, w7500x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[17d]"></a>ADC_ChannelSelect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w7500x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC
</UL>

<P><STRONG><a name="[17e]"></a>ADC_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w7500x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC
</UL>

<P><STRONG><a name="[180]"></a>ADC_ReadData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w7500x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC
</UL>

<P><STRONG><a name="[60]"></a>ADC_InterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, w7500x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[17f]"></a>ADC_IsEOC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, w7500x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC
</UL>

<P><STRONG><a name="[1d9]"></a>ADC_InterruptClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w7500x_adc.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>ADC_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_adc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PowerDownEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_user_io
</UL>

<P><STRONG><a name="[5f]"></a>ADC_DeInit</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, w7500x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InterruptMask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PowerDownEnable
</UL>

<P><STRONG><a name="[155]"></a>DUALTIMER_ClockEnable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[1da]"></a>DUALTIMER_ClockDisable</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>DUALTIMER_Stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>DUALTIMER_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>DUALTIMER_Init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[157]"></a>DUALTIMER_IntConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[15a]"></a>DUALTIMER_IntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IRQ_Handler
</UL>

<P><STRONG><a name="[159]"></a>DUALTIMER_GetIntStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IRQ_Handler
</UL>

<P><STRONG><a name="[1dd]"></a>DUALTIMER_GetIntEnableStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>DUALTIMER_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
</UL>

<P><STRONG><a name="[1de]"></a>DUALTIMER_GetTimerLoad</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>DUALTIMER_SetTimerLoad</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>DUALTIMER_GetTimerValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>DUALTIMER_GetTimerControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>DUALTIMER_SetTimerControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>DUALTIMER_GetTimerRIS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>DUALTIMER_GetTimerMIS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>DUALTIMER_GetTimerBGLoad</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>DUALTIMER_SetTimerBGLoad</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_dualtimer.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>GPIO_DeInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>GPIO_Init</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, w7500x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Configuration
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[62]"></a>GPIO_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, w7500x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Configuration
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[a2]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, w7500x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_rs485_sel
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_val
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_status_io
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_cts_pin
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flowcontrol_dsr_pin
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_boot_entry_pin
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_phylink_in_pin
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_trig_pin
</UL>

<P><STRONG><a name="[1e8]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, w7500x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_val
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_status_io
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_LED_Status
</UL>

<P><STRONG><a name="[1e9]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>GPIO_SetBits</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, w7500x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_MDIO
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart_rts_pin_high
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_rs485_sel
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_io_val
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flowcontrol_dtr_pin
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_user_io
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rs485_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connection_status_io
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_phylink_status_pin
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tcpconnection_status_pin
</UL>

<P><STRONG><a name="[a0]"></a>GPIO_ResetBits</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, w7500x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_MDIO
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart_rts_pin_low
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rs485_rs422_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_io_val
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flowcontrol_dtr_pin
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_user_io
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rs485_disable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connection_status_io
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flowcontrol_dtr_pin
</UL>

<P><STRONG><a name="[1ea]"></a>GPIO_WriteBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>GPIO_INT_Enable_Bits</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>GPIO_INT_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>GPIO_INT_Polarity_Bits</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Configuration
</UL>

<P><STRONG><a name="[1ee]"></a>GPIO_INT_Polarity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>GPIO_INT_Clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>GPIO_Read_INTstatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, w7500x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>PAD_AFConfig</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, w7500x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PAD_AFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Configuration
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[61]"></a>GPIO_Configuration</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, w7500x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAD_AFConfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_info_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_rs485_sel
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rs485_rs422_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_user_io
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hw_trig_pin
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_phylink_in_pin
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_boot_entry_pin
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_phylink_status_pin
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flowcontrol_dtr_pin
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tcpconnection_status_pin
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flowcontrol_dsr_pin
</UL>

<P><STRONG><a name="[65]"></a>GPIO_INT_Configuration</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, w7500x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAD_AFConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Polarity_Bits
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[1f1]"></a>UART_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>UART_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>UART_Init</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, w7500x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Init &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPLLSource
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemClock
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_info_init
</UL>

<P><STRONG><a name="[1f3]"></a>UART_FIFO_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>UART_FIFO_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>UART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>UART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, w7500x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2E_UART_IRQ_Handler
</UL>

<P><STRONG><a name="[1f6]"></a>UART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>UART_GetRecvStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>UART_ClearRecvStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>UART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>UART_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, w7500x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2E_UART_Configuration
</UL>

<P><STRONG><a name="[161]"></a>UART_GetITStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, w7500x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2E_UART_IRQ_Handler
</UL>

<P><STRONG><a name="[163]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w7500x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2E_UART_IRQ_Handler
</UL>

<P><STRONG><a name="[1fa]"></a>S_UART_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>S_UART_SetBaud</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, w7500x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S_UART_SetBaud
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSourceClock
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemClock
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UART_Init
</UL>

<P><STRONG><a name="[74]"></a>S_UART_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w7500x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = S_UART_Init &rArr; S_UART_SetBaud
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UART_SetBaud
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Configuration
</UL>

<P><STRONG><a name="[79]"></a>S_UART_SendData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, w7500x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UartPuts
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UartPutc
</UL>

<P><STRONG><a name="[1fb]"></a>S_UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>S_UART_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>S_UART_SetCTRL</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>S_UART_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>S_UART_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>S_UART_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>UartPutc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, w7500x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPuts
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart_flow_control
</UL>

<P><STRONG><a name="[75]"></a>UartPuts</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, w7500x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
</UL>

<P><STRONG><a name="[77]"></a>UartGetc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetc
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetc
</UL>

<P><STRONG><a name="[78]"></a>S_UartPutc</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, w7500x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = S_UartPutc
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[7a]"></a>S_UartPuts</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w7500x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UART_SendData
</UL>

<P><STRONG><a name="[d4]"></a>S_UartGetc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, w7500x_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[81]"></a>WIZCHIP_READ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_wztoe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_leasedIP
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_conflict
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_update
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetinfo
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetmode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_gettimeout
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlsocket
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_network
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_udp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_tcp_connect_exception
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_socket_termination
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_udp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ether
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_iperf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_udps
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
</UL>

<P><STRONG><a name="[80]"></a>WIZCHIP_WRITE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_wztoe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_leasedIP
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_conflict
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_update
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_assign
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_settimeout
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlsocket
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_network
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mac_Conf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_iperf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
</UL>

<P><STRONG><a name="[7e]"></a>WIZCHIP_READ_BUF</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, w7500x_wztoe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
</UL>

<P><STRONG><a name="[7c]"></a>WIZCHIP_WRITE_BUF</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, w7500x_wztoe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
</UL>

<P><STRONG><a name="[7b]"></a>wiz_send_data</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, w7500x_wztoe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[7d]"></a>wiz_recv_data</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, w7500x_wztoe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[8a]"></a>wiz_recv_ignore</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, w7500x_wztoe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wiz_recv_ignore
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[7f]"></a>close</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = close
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_stop
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_network
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_socket_termination
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNS_run
</UL>

<P><STRONG><a name="[82]"></a>socket</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = socket &rArr; close
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_network
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_udp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_udp
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_iperf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_udps
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNS_run
</UL>

<P><STRONG><a name="[83]"></a>listen</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = listen &rArr; close
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_network
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_iperf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
</UL>

<P><STRONG><a name="[84]"></a>connect</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = connect
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
</UL>

<P><STRONG><a name="[85]"></a>disconnect</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = disconnect &rArr; close
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_network
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_socket_termination
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_iperf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
</UL>

<P><STRONG><a name="[86]"></a>send</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_network
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ether
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
</UL>

<P><STRONG><a name="[87]"></a>recv</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_network
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_iperf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
</UL>

<P><STRONG><a name="[88]"></a>sendto</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_leasedIP
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_DECLINE
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_REQUEST
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_DISCOVER
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_udp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ether
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_udps
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNS_run
</UL>

<P><STRONG><a name="[89]"></a>recvfrom</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = recvfrom &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_ignore
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDHCPMSG
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_udp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_udps
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNS_run
</UL>

<P><STRONG><a name="[8b]"></a>ctlsocket</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>

<P><STRONG><a name="[8d]"></a>setsockopt</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setsockopt &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keepalive_packet_configtool
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keepalive_packet_manual
</UL>

<P><STRONG><a name="[8e]"></a>getsockopt</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getsockopt &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
</UL>

<P><STRONG><a name="[5]"></a>wizchip_cris_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.text)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>wizchip_cris_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.text)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>wizchip_cs_select</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.text)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>wizchip_cs_deselect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.text)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>wizchip_bus_readbyte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.text)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>wizchip_bus_writebyte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.text)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>wizchip_spi_readbyte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>wizchip_spi_writebyte</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text)
</UL>
<P><STRONG><a name="[201]"></a>reg_wizchip_cris_cbfunc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wizchip_conf.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>reg_wizchip_cs_cbfunc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wizchip_conf.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>reg_wizchip_bus_cbfunc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wizchip_conf.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>reg_wizchip_spi_cbfunc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wizchip_conf.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>wizphy_getphylink</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wizchip_conf.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>wizphy_getphypmode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wizchip_conf.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>wizchip_getinterruptmask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wizchip_conf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[90]"></a>wizchip_setinterruptmask</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wizchip_conf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[91]"></a>wizchip_getinterrupt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wizchip_conf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[92]"></a>wizchip_clrinterrupt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wizchip_conf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[93]"></a>wizchip_sw_reset</STRONG> (Thumb, 332 bytes, Stack size 96 bytes, wizchip_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wizchip_sw_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
</UL>

<P><STRONG><a name="[94]"></a>wizchip_init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, wizchip_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wizchip_init &rArr; wizchip_sw_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>ctlwizchip</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, wizchip_conf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[96]"></a>wizchip_gettimeout</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wizchip_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wizchip_gettimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[97]"></a>wizchip_settimeout</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wizchip_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wizchip_settimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>wizchip_getnetmode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wizchip_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wizchip_getnetmode
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[99]"></a>wizchip_setnetmode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wizchip_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wizchip_setnetmode
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[9a]"></a>wizchip_getnetinfo</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, wizchip_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wizchip_getnetinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[9b]"></a>wizchip_setnetinfo</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, wizchip_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wizchip_setnetinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[9c]"></a>ctlnetwork</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wizchip_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ctlnetwork &rArr; wizchip_setnetmode
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetinfo
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetmode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_settimeout
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_gettimeout
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Net_Info
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Conf
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w7500x_dhcp_assign
</UL>

<P><STRONG><a name="[9d]"></a>idle_MDIO</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, w7500x_miim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = idle_MDIO &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_id
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read
</UL>

<P><STRONG><a name="[a1]"></a>input_MDIO</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, w7500x_miim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = input_MDIO &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_id
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read
</UL>

<P><STRONG><a name="[a3]"></a>turnaround_MDIO</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, w7500x_miim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = turnaround_MDIO &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_id
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read
</UL>

<P><STRONG><a name="[a4]"></a>output_MDIO</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, w7500x_miim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = output_MDIO &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_id
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read
</UL>

<P><STRONG><a name="[a5]"></a>mdio_read</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, w7500x_miim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_MDIO
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link
</UL>

<P><STRONG><a name="[a6]"></a>link</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w7500x_miim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read
</UL>

<P><STRONG><a name="[a7]"></a>mdio_write</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, w7500x_miim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_MDIO
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_link
</UL>

<P><STRONG><a name="[a8]"></a>set_link</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, w7500x_miim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_write
</UL>

<P><STRONG><a name="[a9]"></a>phy_id</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, w7500x_miim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = phy_id &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_MDIO
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_init
</UL>

<P><STRONG><a name="[ab]"></a>mdio_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, w7500x_miim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mdio_init &rArr; phy_id &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_id
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAD_AFConfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W7500x_Board_Init
</UL>

<P><STRONG><a name="[b]"></a>default_ip_assign</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = default_ip_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_update
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dhcp.o(.text)
<LI> dhcp.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>default_ip_update</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = default_ip_update &rArr; default_ip_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_assign
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dhcp.o(.text)
<LI> dhcp.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>default_ip_conflict</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = default_ip_conflict
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dhcp.o(.text)
<LI> dhcp.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>reg_dhcp_cbfunc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reg_dhcp_cbfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dhcp
</UL>

<P><STRONG><a name="[ad]"></a>makeDHCPMSG</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = makeDHCPMSG
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_DECLINE
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_REQUEST
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_DISCOVER
</UL>

<P><STRONG><a name="[ac]"></a>send_DHCP_DISCOVER</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = send_DHCP_DISCOVER &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDHCPMSG
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_timeout
</UL>

<P><STRONG><a name="[ae]"></a>send_DHCP_REQUEST</STRONG> (Thumb, 558 bytes, Stack size 32 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = send_DHCP_REQUEST &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDHCPMSG
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_timeout
</UL>

<P><STRONG><a name="[af]"></a>send_DHCP_DECLINE</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = send_DHCP_DECLINE &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDHCPMSG
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_leasedIP
</UL>

<P><STRONG><a name="[b0]"></a>parseDHCPMSG</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = parseDHCPMSG &rArr; recvfrom &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
</UL>

<P><STRONG><a name="[b2]"></a>reset_DHCP_timeout</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_timeout
</UL>

<P><STRONG><a name="[b1]"></a>check_DHCP_timeout</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = check_DHCP_timeout &rArr; send_DHCP_REQUEST &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DHCP_timeout
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_REQUEST
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_DISCOVER
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
</UL>

<P><STRONG><a name="[b3]"></a>check_DHCP_leasedIP</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = check_DHCP_leasedIP &rArr; send_DHCP_DECLINE &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_DECLINE
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
</UL>

<P><STRONG><a name="[b4]"></a>DHCP_run</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DHCP_run &rArr; check_DHCP_timeout &rArr; send_DHCP_REQUEST &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_leasedIP
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_timeout
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DHCP_timeout
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDHCPMSG
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_REQUEST
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_DISCOVER
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dhcp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dns
</UL>

<P><STRONG><a name="[b5]"></a>DHCP_stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DHCP_stop &rArr; close
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dhcp
</UL>

<P><STRONG><a name="[b6]"></a>DHCP_init</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DHCP_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DHCP_timeout
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dhcp
</UL>

<P><STRONG><a name="[15f]"></a>DHCP_time_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IRQ_Handler
</UL>

<P><STRONG><a name="[ca]"></a>getIPfromDHCP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w7500x_dhcp_assign
</UL>

<P><STRONG><a name="[cb]"></a>getGWfromDHCP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w7500x_dhcp_assign
</UL>

<P><STRONG><a name="[cc]"></a>getSNfromDHCP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w7500x_dhcp_assign
</UL>

<P><STRONG><a name="[cd]"></a>getDNSfromDHCP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w7500x_dhcp_assign
</UL>

<P><STRONG><a name="[dc]"></a>getDHCPLeasetime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_dhcp
</UL>

<P><STRONG><a name="[ba]"></a>get16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDNSMSG
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_answer
</UL>

<P><STRONG><a name="[be]"></a>put16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
</UL>

<P><STRONG><a name="[b8]"></a>parse_name</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = parse_name
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_answer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_question
</UL>

<P><STRONG><a name="[b7]"></a>dns_question</STRONG> (Thumb, 30 bytes, Stack size 84 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dns_question &rArr; parse_name
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_name
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDNSMSG
</UL>

<P><STRONG><a name="[b9]"></a>dns_answer</STRONG> (Thumb, 168 bytes, Stack size 92 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dns_answer &rArr; parse_name
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_name
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get16
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDNSMSG
</UL>

<P><STRONG><a name="[bb]"></a>parseDNSMSG</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = parseDNSMSG &rArr; dns_answer &rArr; parse_name
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_answer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_question
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get16
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNS_run
</UL>

<P><STRONG><a name="[bd]"></a>dns_makequery</STRONG> (Thumb, 172 bytes, Stack size 120 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dns_makequery &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put16
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNS_run
</UL>

<P><STRONG><a name="[c4]"></a>check_DNS_timeout</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNS_run
</UL>

<P><STRONG><a name="[d8]"></a>DNS_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dns_fw_server
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dns
</UL>

<P><STRONG><a name="[c3]"></a>DNS_run</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DNS_run &rArr; dns_makequery &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DNS_timeout
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDNSMSG
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dns_fw_server
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dns
</UL>

<P><STRONG><a name="[160]"></a>DNS_time_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IRQ_Handler
</UL>

<P><STRONG><a name="[c5]"></a>loopback_tcps</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, loopback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = loopback_tcps &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>loopback_tcpc</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, loopback.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[c7]"></a>loopback_udps</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, loopback.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[c8]"></a>loopback_iperf</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, loopback.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[33]"></a>w7500x_dhcp_assign</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, dhcp_cb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = w7500x_dhcp_assign &rArr; set_DevConfig_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDNSfromDHCP
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSNfromDHCP
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGWfromDHCP
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIPfromDHCP
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_DevConfig_value
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_value
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>w7500x_dhcp_conflict</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dhcp_cb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, w7500x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SSP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SSP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART0_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w7500x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART0_Handler &rArr; S2E_UART_IRQ_Handler &rArr; check_modeswitch_trigger &rArr; restore_serial_data
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2E_UART_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART1_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w7500x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART1_Handler &rArr; S2E_UART_IRQ_Handler &rArr; check_modeswitch_trigger &rArr; restore_serial_data
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2E_UART_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PORT0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PORT1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PORT2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PORT3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DUALTIMER0_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, w7500x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DUALTIMER0_Handler &rArr; Timer_IRQ_Handler &rArr; gpio_handler_timer_msec &rArr; check_phylink_status &rArr; set_connection_status_io &rArr; LED_On &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DUALTIMER1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PWM0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PWM1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PWM2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PWM3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PWM4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PWM5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PWM6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>WZTOE_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_w7500x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>fputc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fputc &rArr; S_UartPutc
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UartPutc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>fgetc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UartGetc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UartPutc
</UL>

<P><STRONG><a name="[1a3]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[d5]"></a>_ttywrch</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UartPutc
</UL>

<P><STRONG><a name="[59]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d6]"></a>display_Dev_Info_dns</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = display_Dev_Info_dns &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>process_dns</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = process_dns &rArr; do_segcp &rArr; proc_SEGCP_udp &rArr; proc_SEGCP &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_status
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNS_run
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNS_init
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>display_Dev_Info_dhcp</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = display_Dev_Info_dhcp &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDHCPLeasetime
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>process_dhcp</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = process_dhcp &rArr; do_segcp &rArr; proc_SEGCP_udp &rArr; proc_SEGCP &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_stop
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_dhcp_cbfunc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_status
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>display_Dev_Info_main</STRONG> (Thumb, 1676 bytes, Stack size 80 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = display_Dev_Info_main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_type
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_direction
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>display_Dev_Info_header</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = display_Dev_Info_header &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>main</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = main &rArr; process_dns &rArr; do_segcp &rArr; proc_SEGCP_udp &rArr; proc_SEGCP &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_settimeout
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemClock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_DevConfig_from_storage
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_trigger_modeswitch
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_seg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Net_Info
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W7500x_Board_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2E_UART_Configuration
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Conf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mac_Conf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Configuration
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_header
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_main
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dhcp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_dhcp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dns
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_dns
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W7500x_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9f]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_MDIO
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_MDIO
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rs485_enable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rs485_disable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_trig_pin
</UL>

<P><STRONG><a name="[d0]"></a>TimingDelay_Decrement</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f1]"></a>LED_Init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, w7500x_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LED_Init &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAD_AFConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W7500x_Board_Init
</UL>

<P><STRONG><a name="[f2]"></a>init_boot_entry_pin</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, w7500x_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = init_boot_entry_pin &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W7500x_Board_Init
</UL>

<P><STRONG><a name="[f3]"></a>init_phylink_in_pin</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w7500x_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = init_phylink_in_pin &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W7500x_Board_Init
</UL>

<P><STRONG><a name="[f4]"></a>get_hw_trig_pin</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, w7500x_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_hw_trig_pin &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W7500x_Board_Init
</UL>

<P><STRONG><a name="[f5]"></a>init_hw_trig_pin</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, w7500x_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = init_hw_trig_pin &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W7500x_Board_Init
</UL>

<P><STRONG><a name="[e5]"></a>W7500x_Board_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, w7500x_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = W7500x_Board_Init &rArr; mdio_init &rArr; phy_id &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_phylink_time_check
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hw_trig_pin
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_trig_pin
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_phylink_in_pin
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_boot_entry_pin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>Supervisory_IC_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, w7500x_board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W7500x_Init
</UL>

<P><STRONG><a name="[f7]"></a>get_phylink_in_pin</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, w7500x_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_phylink_in_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ether
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_phylink_status
</UL>

<P><STRONG><a name="[123]"></a>init_uart_if_sel_pin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, w7500x_board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_DevConfig_from_storage
</UL>

<P><STRONG><a name="[126]"></a>get_uart_if_sel_pin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w7500x_board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_DevConfig_from_storage
</UL>

<P><STRONG><a name="[f8]"></a>get_boot_entry_pin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w7500x_board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[f9]"></a>LED_On</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w7500x_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_On &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connection_status_io
</UL>

<P><STRONG><a name="[fa]"></a>LED_Off</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w7500x_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connection_status_io
</UL>

<P><STRONG><a name="[207]"></a>LED_Toggle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, w7500x_board.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>get_LED_Status</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, w7500x_board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>

<P><STRONG><a name="[d9]"></a>set_device_status</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_device_status &rArr; set_connection_status_io &rArr; LED_On &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connection_status_io
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_udp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_trigger_modeswitch
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dhcp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dns
</UL>

<P><STRONG><a name="[103]"></a>add_data_transfer_bytecount</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, seg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ether
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
</UL>

<P><STRONG><a name="[fe]"></a>check_connect_pw_auth</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = check_connect_pw_auth &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
</UL>

<P><STRONG><a name="[101]"></a>ether_to_uart</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ether_to_uart &rArr; get_uart_cts_pin &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rs485_enable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rs485_disable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_cts_pin
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flowcontrol_dsr_pin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_connect_pw_auth
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_data_transfer_bytecount
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_udp
</UL>

<P><STRONG><a name="[108]"></a>get_serial_data</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_serial_data &rArr; uart_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ether
</UL>

<P><STRONG><a name="[10b]"></a>uart_to_ether</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = uart_to_ether &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_serial_data
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_data_transfer_bytecount
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_phylink_in_pin
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_udp
</UL>

<P><STRONG><a name="[10c]"></a>proc_SEG_udp</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = proc_SEG_udp &rArr; ether_to_uart &rArr; get_uart_cts_pin &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ether
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_status
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_seg
</UL>

<P><STRONG><a name="[10d]"></a>get_tcp_any_port</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_tcp_any_port &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_phylink_downtime
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
</UL>

<P><STRONG><a name="[115]"></a>reset_SEG_timeflags</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, seg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
</UL>

<P><STRONG><a name="[111]"></a>process_socket_termination</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = process_socket_termination &rArr; disconnect &rArr; close
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_socket_termination
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_seg
</UL>

<P><STRONG><a name="[112]"></a>send_keepalive_packet_manual</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_keepalive_packet_manual &rArr; setsockopt &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
</UL>

<P><STRONG><a name="[113]"></a>check_tcp_connect_exception</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = check_tcp_connect_exception &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
</UL>

<P><STRONG><a name="[114]"></a>proc_SEG_tcp_mixed</STRONG> (Thumb, 1086 bytes, Stack size 48 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = proc_SEG_tcp_mixed &rArr; ether_to_uart &rArr; get_uart_cts_pin &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_tcp_connect_exception
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keepalive_packet_manual
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_socket_termination
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_SEG_timeflags
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_any_port
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ether
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_status
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_seg
</UL>

<P><STRONG><a name="[116]"></a>proc_SEG_tcp_server</STRONG> (Thumb, 720 bytes, Stack size 48 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = proc_SEG_tcp_server &rArr; ether_to_uart &rArr; get_uart_cts_pin &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keepalive_packet_manual
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_socket_termination
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_SEG_timeflags
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ether
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_status
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_seg
</UL>

<P><STRONG><a name="[117]"></a>proc_SEG_tcp_client</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = proc_SEG_tcp_client &rArr; ether_to_uart &rArr; get_uart_cts_pin &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_tcp_connect_exception
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keepalive_packet_manual
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_socket_termination
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_SEG_timeflags
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_any_port
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ether
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_status
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_seg
</UL>

<P><STRONG><a name="[ec]"></a>init_trigger_modeswitch</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = init_trigger_modeswitch &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_status
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_seg
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>do_seg</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = do_seg &rArr; proc_SEG_tcp_server &rArr; ether_to_uart &rArr; get_uart_cts_pin &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart_flow_control
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_socket_termination
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_udp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_trigger_modeswitch
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>get_device_status</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_device_status
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
</UL>

<P><STRONG><a name="[11b]"></a>restore_serial_data</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = restore_serial_data
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_timer_msec
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_modeswitch_trigger
</UL>

<P><STRONG><a name="[11c]"></a>check_modeswitch_trigger</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_modeswitch_trigger &rArr; restore_serial_data
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_serial_data
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2E_UART_IRQ_Handler
</UL>

<P><STRONG><a name="[11d]"></a>check_serial_store_permitted</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_serial_store_permitted
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2E_UART_IRQ_Handler
</UL>

<P><STRONG><a name="[11e]"></a>init_time_delimiter_timer</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_time_delimiter_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2E_UART_IRQ_Handler
</UL>

<P><STRONG><a name="[11f]"></a>clear_data_transfer_bytecount</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clear_data_transfer_bytecount &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_reboot
</UL>

<P><STRONG><a name="[208]"></a>get_data_transfer_bytecount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, seg.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>seg_timer_msec</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, seg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = seg_timer_msec &rArr; restore_serial_data
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_serial_data
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IRQ_Handler
</UL>

<P><STRONG><a name="[15e]"></a>seg_timer_sec</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, seg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IRQ_Handler
</UL>

<P><STRONG><a name="[c9]"></a>get_DevConfig_pointer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, configdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dns_fw_server
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_network
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_io_val
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_io_type
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_io_direction
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_user_io
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_connection_status_io
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_val
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_status_io
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_update
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_udp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_uart
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_commandline
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connection_status_io
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_timer_msec
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_time_delimiter_timer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_serial_store_permitted
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_modeswitch_trigger
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_status
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_tcp_connect_exception
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_socket_termination
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_udp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ether
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_serial_data
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_connect_pw_auth
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_status
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_trigger_modeswitch
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_type
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_direction
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_seg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2E_UART_Configuration
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Configuration
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_header
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_main
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_dhcp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dns
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_dns
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2E_UART_IRQ_Handler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w7500x_dhcp_assign
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_io_enable
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_enabled
</UL>

<P><STRONG><a name="[121]"></a>set_DevConfig_to_factory_value</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, configdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_DevConfig_to_factory_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_set_factory_default
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_DevConfig_from_storage
</UL>

<P><STRONG><a name="[e6]"></a>load_DevConfig_from_storage</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, configdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = load_DevConfig_from_storage &rArr; write_storage &rArr; erase_storage &rArr; erase_flash_block &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_storage
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_storage
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_DevConfig_to_factory_value
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_if_sel_pin
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart_if_sel_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>save_DevConfig_to_storage</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, configdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = save_DevConfig_to_storage &rArr; write_storage &rArr; erase_storage &rArr; erase_flash_block &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_set_factory_default
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
</UL>

<P><STRONG><a name="[ce]"></a>get_DevConfig_value</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, configdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_DevConfig_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Conf
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w7500x_dhcp_assign
</UL>

<P><STRONG><a name="[cf]"></a>set_DevConfig_value</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, configdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_DevConfig_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_DevConfig
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w7500x_dhcp_assign
</UL>

<P><STRONG><a name="[128]"></a>set_DevConfig</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, configdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_DevConfig_value
</UL>

<P><STRONG><a name="[129]"></a>get_DevConfig</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, configdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_value
</UL>

<P><STRONG><a name="[eb]"></a>display_Net_Info</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, configdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = display_Net_Info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>Mac_Conf</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, configdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mac_Conf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>Net_Conf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, configdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Net_Conf &rArr; get_DevConfig_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_value
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[209]"></a>set_dhcp_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, configdata.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>set_static_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, configdata.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>set_mac</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, configdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[12b]"></a>parse_SEGCP</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, segcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = parse_SEGCP &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_udp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[12d]"></a>proc_SEGCP</STRONG> (Thumb, 2946 bytes, Stack size 144 bytes, segcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = proc_SEGCP &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_flush
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_io_val
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_io_type
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_io_direction
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flowcontrol_dtr_pin
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_macaddr
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipaddr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_hexstr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_hex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_user_io
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_connection_status_io
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_val
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_status_io
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_SEGCP
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_socket_termination
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_type
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_direction
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_udp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_uart
</UL>

<P><STRONG><a name="[141]"></a>uart_get_commandline</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, segcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uart_get_commandline &rArr; uart_puts &rArr; uart_putc &rArr; S_UartPutc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_uart
</UL>

<P><STRONG><a name="[142]"></a>proc_SEGCP_uart</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, segcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = proc_SEGCP_uart &rArr; proc_SEGCP &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_commandline
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
</UL>

<P><STRONG><a name="[143]"></a>send_keepalive_packet_configtool</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, segcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_keepalive_packet_configtool &rArr; setsockopt &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
</UL>

<P><STRONG><a name="[144]"></a>proc_SEGCP_tcp</STRONG> (Thumb, 472 bytes, Stack size 96 bytes, segcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = proc_SEGCP_tcp &rArr; proc_SEGCP &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keepalive_packet_configtool
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_SEGCP
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
</UL>

<P><STRONG><a name="[145]"></a>proc_SEGCP_udp</STRONG> (Thumb, 326 bytes, Stack size 128 bytes, segcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = proc_SEGCP_udp &rArr; proc_SEGCP &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_SEGCP
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
</UL>

<P><STRONG><a name="[da]"></a>do_segcp</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, segcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = do_segcp &rArr; proc_SEGCP_udp &rArr; proc_SEGCP &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate_User
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_storage
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_set_factory_default
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_reboot
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_update
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_udp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_uart
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_DevConfig_to_storage
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_status
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_status
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_trigger_modeswitch
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Configuration
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dhcp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dns
</UL>

<P><STRONG><a name="[15b]"></a>segcp_timer_msec</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, segcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IRQ_Handler
</UL>

<P><STRONG><a name="[137]"></a>is_ipaddr</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = is_ipaddr &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[138]"></a>is_hexstr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = is_hexstr &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_macaddr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[135]"></a>is_hex</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_hex &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[139]"></a>str_to_hex</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = str_to_hex &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_macaddr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[134]"></a>is_macaddr</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = is_macaddr &rArr; str_to_hex &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_hexstr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[14d]"></a>conv_hexstr</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[14e]"></a>mid</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mid &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
</UL>

<P><STRONG><a name="[151]"></a>DO_IAP</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, flashhandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DO_IAP
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_block
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
</UL>

<P><STRONG><a name="[150]"></a>erase_flash_sector</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, flashhandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = erase_flash_sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DO_IAP
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_storage
</UL>

<P><STRONG><a name="[152]"></a>erase_flash_block</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, flashhandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = erase_flash_block &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DO_IAP
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_storage
</UL>

<P><STRONG><a name="[153]"></a>write_flash</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, flashhandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_flash &rArr; DO_IAP
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DO_IAP
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_storage
</UL>

<P><STRONG><a name="[154]"></a>read_flash</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flashhandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_storage
</UL>

<P><STRONG><a name="[124]"></a>read_storage</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, storagehandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_storage &rArr; read_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_DevConfig_from_storage
</UL>

<P><STRONG><a name="[147]"></a>erase_storage</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, storagehandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = erase_storage &rArr; erase_flash_block &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_block
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_update
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_storage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
</UL>

<P><STRONG><a name="[125]"></a>write_storage</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, storagehandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = write_storage &rArr; erase_storage &rArr; erase_flash_block &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_update
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_DevConfig_to_storage
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_DevConfig_from_storage
</UL>

<P><STRONG><a name="[ef]"></a>Timer_Configuration</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, timerhandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timer_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUALTIMER_Start
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUALTIMER_IntConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUALTIMER_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUALTIMER_ClockEnable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemClock
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W7500x_Init
</UL>

<P><STRONG><a name="[d2]"></a>Timer_IRQ_Handler</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, timerhandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Timer_IRQ_Handler &rArr; gpio_handler_timer_msec &rArr; check_phylink_status &rArr; set_connection_status_io &rArr; LED_On &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_time_handler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUALTIMER_GetIntStatus
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUALTIMER_IntClear
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_handler_timer_msec
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_timer_msec
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segcp_timer_msec
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_timer_sec
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seg_timer_msec
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNS_time_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUALTIMER0_Handler
</UL>

<P><STRONG><a name="[20b]"></a>getDeviceUptime_hour</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timerhandler.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>getDeviceUptime_min</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timerhandler.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>getDeviceUptime_sec</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timerhandler.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>getDeviceUptime_msec</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timerhandler.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>set_phylink_time_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timerhandler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W7500x_Board_Init
</UL>

<P><STRONG><a name="[10e]"></a>get_phylink_downtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timerhandler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_any_port
</UL>

<P><STRONG><a name="[d1]"></a>S2E_UART_IRQ_Handler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, uarthandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = S2E_UART_IRQ_Handler &rArr; check_modeswitch_trigger &rArr; restore_serial_data
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_time_delimiter_timer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_serial_store_permitted
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_modeswitch_trigger
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[164]"></a>uart_rs485_rs422_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uarthandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uart_rs485_rs422_init &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_info_init
</UL>

<P><STRONG><a name="[165]"></a>get_uart_rs485_sel</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, uarthandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = get_uart_rs485_sel &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_info_init
</UL>

<P><STRONG><a name="[166]"></a>set_uart_rts_pin_low</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uarthandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_uart_rts_pin_low &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_info_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart_flow_control
</UL>

<P><STRONG><a name="[167]"></a>serial_info_init</STRONG> (Thumb, 256 bytes, Stack size 88 bytes, uarthandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = serial_info_init &rArr; get_uart_rs485_sel &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart_rts_pin_low
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_rs485_sel
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rs485_rs422_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2E_UART_Configuration
</UL>

<P><STRONG><a name="[e8]"></a>S2E_UART_Configuration</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, uarthandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = S2E_UART_Configuration &rArr; serial_info_init &rArr; get_uart_rs485_sel &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_info_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>UART2_Configuration</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uarthandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART2_Configuration &rArr; S_UART_Init &rArr; S_UART_SetBaud
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W7500x_Init
</UL>

<P><STRONG><a name="[169]"></a>set_uart_rts_pin_high</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uarthandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_uart_rts_pin_high
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart_flow_control
</UL>

<P><STRONG><a name="[119]"></a>check_uart_flow_control</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, uarthandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = check_uart_flow_control &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart_rts_pin_high
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart_rts_pin_low
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_seg
</UL>

<P><STRONG><a name="[106]"></a>uart_putc</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, uarthandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uart_putc &rArr; S_UartPutc
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UartPutc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puts
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
</UL>

<P><STRONG><a name="[118]"></a>uart_puts</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, uarthandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uart_puts &rArr; uart_putc &rArr; S_UartPutc
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UartPutc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_uart
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_commandline
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_trigger_modeswitch
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
</UL>

<P><STRONG><a name="[10a]"></a>uart_getc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uarthandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_commandline
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_serial_data
</UL>

<P><STRONG><a name="[16a]"></a>uart_getc_nonblk</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uarthandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[16b]"></a>uart_gets</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, uarthandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[132]"></a>uart_rx_flush</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uarthandler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[105]"></a>uart_rs485_enable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uarthandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_rs485_enable &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
</UL>

<P><STRONG><a name="[107]"></a>uart_rs485_disable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uarthandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_rs485_disable &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
</UL>

<P><STRONG><a name="[102]"></a>get_uart_cts_pin</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uarthandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = get_uart_cts_pin &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
</UL>

<P><STRONG><a name="[146]"></a>device_set_factory_default</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, devicehandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = device_set_factory_default &rArr; save_DevConfig_to_storage &rArr; write_storage &rArr; erase_storage &rArr; erase_flash_block &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_DevConfig_to_storage
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_DevConfig_to_factory_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
</UL>

<P><STRONG><a name="[16c]"></a>device_socket_termination</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, devicehandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = device_socket_termination &rArr; process_socket_termination &rArr; disconnect &rArr; close
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_socket_termination
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_reboot
</UL>

<P><STRONG><a name="[149]"></a>device_reboot</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, devicehandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = device_reboot &rArr; device_socket_termination &rArr; process_socket_termination &rArr; disconnect &rArr; close
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_socket_termination
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_data_transfer_bytecount
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
</UL>

<P><STRONG><a name="[171]"></a>reset_fw_update_timer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, devicehandler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_network
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_update
</UL>

<P><STRONG><a name="[172]"></a>get_any_port</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, devicehandler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
</UL>

<P><STRONG><a name="[16d]"></a>gen_http_fw_request</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, devicehandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = gen_http_fw_request &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
</UL>

<P><STRONG><a name="[16e]"></a>get_firmware_from_server</STRONG> (Thumb, 500 bytes, Stack size 72 bytes, devicehandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = get_firmware_from_server &rArr; gen_http_fw_request &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_http_fw_request
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_any_port
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_fw_update_timer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_update
</UL>

<P><STRONG><a name="[173]"></a>get_firmware_from_network</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, devicehandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_firmware_from_network &rArr; send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_fw_update_timer
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_update
</UL>

<P><STRONG><a name="[174]"></a>process_dns_fw_server</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, devicehandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = process_dns_fw_server &rArr; DNS_run &rArr; dns_makequery &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNS_run
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNS_init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_update
</UL>

<P><STRONG><a name="[148]"></a>device_firmware_update</STRONG> (Thumb, 664 bytes, Stack size 32 bytes, devicehandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = device_firmware_update &rArr; process_dns_fw_server &rArr; DNS_run &rArr; dns_makequery &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dns_fw_server
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_network
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_fw_update_timer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_storage
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_storage
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
</UL>

<P><STRONG><a name="[15c]"></a>device_timer_msec</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, devicehandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = device_timer_msec
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IRQ_Handler
</UL>

<P><STRONG><a name="[175]"></a>get_user_io_bitorder</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpiohandler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_io_val
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_io_type
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_user_io
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_val
</UL>

<P><STRONG><a name="[13d]"></a>init_user_io</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = init_user_io &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_bitorder
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_io_type
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_io_direction
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Configuration
</UL>

<P><STRONG><a name="[176]"></a>get_user_io_enabled</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_user_io_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Configuration
</UL>

<P><STRONG><a name="[13f]"></a>set_flowcontrol_dtr_pin</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_flowcontrol_dtr_pin &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Configuration
</UL>

<P><STRONG><a name="[177]"></a>init_flowcontrol_dsr_pin</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = init_flowcontrol_dsr_pin &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_connection_status_io
</UL>

<P><STRONG><a name="[178]"></a>init_tcpconnection_status_pin</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = init_tcpconnection_status_pin &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_connection_status_io
</UL>

<P><STRONG><a name="[179]"></a>init_flowcontrol_dtr_pin</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = init_flowcontrol_dtr_pin &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_connection_status_io
</UL>

<P><STRONG><a name="[17a]"></a>init_phylink_status_pin</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = init_phylink_status_pin &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_connection_status_io
</UL>

<P><STRONG><a name="[13e]"></a>init_connection_status_io</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = init_connection_status_io &rArr; init_phylink_status_pin &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_phylink_status_pin
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flowcontrol_dtr_pin
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tcpconnection_status_pin
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flowcontrol_dsr_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Configuration
</UL>

<P><STRONG><a name="[e9]"></a>IO_Configuration</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IO_Configuration &rArr; init_user_io &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flowcontrol_dtr_pin
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_user_io
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_connection_status_io
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b]"></a>set_user_io_enable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gpiohandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>

<P><STRONG><a name="[13c]"></a>set_user_io_direction</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = set_user_io_direction &rArr; init_user_io &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_user_io
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_io_type
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[13b]"></a>set_user_io_type</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = set_user_io_type &rArr; set_user_io_direction &rArr; init_user_io &rArr; GPIO_Configuration &rArr; PAD_AFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_io_direction
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_user_io
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_bitorder
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[e2]"></a>get_user_io_type</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_user_io_type
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_main
</UL>

<P><STRONG><a name="[e1]"></a>get_user_io_direction</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_user_io_direction
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_main
</UL>

<P><STRONG><a name="[17c]"></a>read_ADC</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_ADC
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IsEOC
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadData
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_val
</UL>

<P><STRONG><a name="[130]"></a>get_user_io_val</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_user_io_val &rArr; read_ADC
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ADC
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_bitorder
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[13a]"></a>set_user_io_val</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_user_io_val &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_io_bitorder
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[fd]"></a>set_connection_status_io</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_connection_status_io &rArr; LED_On &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_status
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_phylink_status
</UL>

<P><STRONG><a name="[131]"></a>get_connection_status_io</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_connection_status_io
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[104]"></a>get_flowcontrol_dsr_pin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_flowcontrol_dsr_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
</UL>

<P><STRONG><a name="[181]"></a>check_phylink_status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = check_phylink_status &rArr; set_connection_status_io &rArr; LED_On &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_connection_status_io
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_phylink_in_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_handler_timer_msec
</UL>

<P><STRONG><a name="[15d]"></a>gpio_handler_timer_msec</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gpiohandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpio_handler_timer_msec &rArr; check_phylink_status &rArr; set_connection_status_io &rArr; LED_On &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_phylink_status
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IRQ_Handler
</UL>

<P><STRONG><a name="[20f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipaddr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_hexstr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_hex
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>

<P><STRONG><a name="[14c]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
</UL>

<P><STRONG><a name="[aa]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_id
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_block
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sector
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_update
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_udp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_uart
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_cts_pin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart_flow_control
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_tcp_connect_exception
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_udp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ether
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_trigger_modeswitch
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Net_Info
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_header
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_main
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_dhcp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Dev_Info_dns
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_iperf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_udps
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcpc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loopback_tcps
</UL>

<P><STRONG><a name="[12e]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_http_fw_request
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_udp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[185]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[186]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[184]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[42]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[45]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[211]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[136]"></a>__0sscanf</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_hexstr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[18f]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1ac]"></a>_scanf_string</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[14b]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipaddr
</UL>

<P><STRONG><a name="[170]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
</UL>

<P><STRONG><a name="[10f]"></a>srand</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_any_port
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[4b]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[140]"></a>strtok</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = strtok &rArr; __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[c1]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_macaddr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
</UL>

<P><STRONG><a name="[14f]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid
</UL>

<P><STRONG><a name="[100]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_udp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_to_uart
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_connect_pw_auth
</UL>

<P><STRONG><a name="[bf]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_SEGCP
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
</UL>

<P><STRONG><a name="[c0]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_hexstr
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_hex
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_macaddr
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipaddr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_hexstr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_udp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_uart
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_commandline
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_SEGCP
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_connect_pw_auth
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
</UL>

<P><STRONG><a name="[12c]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_SEGCP
</UL>

<P><STRONG><a name="[133]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gets
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_macaddr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_udp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_SEGCP
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mac
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_DevConfig_to_factory_value
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_connect_pw_auth
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_DevConfig_value
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DevConfig_value
</UL>

<P><STRONG><a name="[212]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[194]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_http_fw_request
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_DevConfig_to_factory_value
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDNSMSG
</UL>

<P><STRONG><a name="[197]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[213]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[c2]"></a>strncpy</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
</UL>

<P><STRONG><a name="[12f]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_udp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_tcp
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_uread4</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_network
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_update
</UL>

<P><STRONG><a name="[215]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__aeabi_uwrite4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_from_server
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_firmware_update
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_DevConfig_to_factory_value
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_segcp
</UL>

<P><STRONG><a name="[216]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UART_SetBaud
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate_User
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gets
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_nonblk
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_serial_data
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W7500x_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2E_UART_IRQ_Handler
</UL>

<P><STRONG><a name="[218]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gets
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP_uart
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_commandline
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart_flow_control
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_client
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_server
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_tcp_mixed
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_any_port
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEG_udp
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_serial_data
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S2E_UART_IRQ_Handler
</UL>

<P><STRONG><a name="[219]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[198]"></a>_dadd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[21d]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>_drsb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[21e]"></a>_dfixu</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[21f]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[19e]"></a>_fdiv</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[19d]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[220]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[221]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[222]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__ARM_scalbnf</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[4d]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[223]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[183]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[35]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[1a1]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[47]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[49]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[182]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[190]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[18e]"></a>__vfscanf_char</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[36]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[192]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[193]"></a>__strtok_internal</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, strtok_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[189]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[225]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[226]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1a4]"></a>__vfscanf</STRONG> (Thumb, 892 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring (Weak Reference)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb (Weak Reference)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real (Weak Reference)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc (Weak Reference)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[1a5]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1a7]"></a>strcspn</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[1a6]"></a>strspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[50]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[55]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[227]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, socket.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlsocket
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_SEGCP
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_data_transfer_bytecount
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_status
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_answer
</UL>

<P><STRONG><a name="[18c]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[34]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[229]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[1b2]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[1b4]"></a>_frsb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[22a]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[1b6]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e4]"></a>W7500x_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W7500x_Init &rArr; SystemInit_User &rArr; SystemCoreClockUpdate_User
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_User
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemClock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Configuration
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Configuration
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Supervisory_IC_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[199]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1b5]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[1b3]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[38]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[1b0]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1a2]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[187]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[188]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1a9]"></a>_scanf_longlong</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1ab]"></a>_scanf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1a8]"></a>_scanf_real</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1ad]"></a>_scanf_wctomb</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1aa]"></a>_scanf_wstring</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<HR></body></html>
